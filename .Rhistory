x1_sigma_inv = x1 %*% sigma_inv
MHdist = matrix(rowSums(x1_sigma_inv * x1), n, 1)
if (l == 1 ) {
e = matrix(0, n, d)
} else {
for (i in 1:n) {
if (MHdist[i,] < l^2) {
e[i,] = 0
}
else { e[i,] = (x[i,] - mu[j,]) }
}
}
# Update mu
mu[j,] = colSums(T_mat[j,]%*%(x-e))/colSums(as.matrix(T_mat[j,]))
# Update sigma
num = matrix(0,d,d); denom = 0
if (sigma_str == "unstr") {
indices = which(e[,1]==0)
if (length(indices) == 0) {
stop('lambda is too small, choose a bigger lambda to avoid no inliers case!')
}
denom = sum(T_mat[j,indices])
if (l == 1) {
x_prime = x[indices,]-matrix(mu[j,], ncol=d, nrow=length(indices), byrow=T)
} else {
x_prime = x[indices,]-e[indices,]-matrix(mu[j,], ncol=d, nrow=length(indices), byrow=T)
}
num = t(x_prime)%*%diag(T_mat[j,indices], nrow=length(indices))%*%x_prime
sigma[[j]] = matrix(num/denom, d, d)
}
else if (sigma_str == "const") {
num = rowSums(sapply(1:n, function(i) {T_mat[j,i]*(1/d)*c(t(matrix(x[i,]-e[i,]-mu[j,]))%*%diag(d)%*%matrix(x[i,]-e[i,]-mu[j,])) * diag(d)}))
denom = sum(T_mat[j,])
sigma[[j]] =  matrix(num/denom, d, d)
}
# Diagonal structure
else {
num = rowSums(sapply(1:n, function(i) {T_mat[j,i]*(matrix(x[i,]-e[i,]-mu[j,])%*%t(matrix(x[i,]-e[i,]-mu[j,])))*diag(d)}))
denom = sum(T_mat[j,])
sigma[[j]] =  matrix(num/denom, d, d)
}
# Eliminate uninformative cluster
if (sum(T_mat[j,]!=0) <= 3) {
mu[j,] = matrix(0, 1, d)
sigma[[j]] = diag(d) * 1e-2
}
}
if (any(is.na(max(abs(old_T_mat - T_mat))))) {stop('The lambda value is too small')}
if (max(abs(old_T_mat - T_mat)) < 1e-6) break
}
}
# Assign the column names to the specified cluster
Soft_assign = t(T_mat)
colnames(Soft_assign) = paste(1:c)
hard_assign = matrix(paste(apply(Soft_assign, 1, which.max)), n, 1)
# Construct return list
returnList = list(mu, sigma, T_mat, tau, c, d, n, lambda, hard_assign)
names(returnList) = c("mu", "sigma", "T_mat", "tau", "c", "d", "n", "lambda", "hard_assign")
return(returnList)
}
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
## Set hyperparam
cluster = 4
lam = 2
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
## Set hyperparam
cluster = 4
lam = 3
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
knitr::opts_chunk$set(echo = TRUE)
## Library needed
library(ggpubr)
library(MASS)
library(stats)
library(Matrix)
library(mvtnorm)
library(mixtools)
library(dplyr)
library(stats)
## Sourcing file
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/plot_helper.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/rem_core.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/initial_cond.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/simulator.R')
## Set hyperparam
cluster = 4
lam = 3
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
## Set hyperparam
cluster = 4
lam = 2
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
knitr::opts_chunk$set(echo = TRUE)
## Library needed
library(ggpubr)
library(MASS)
library(stats)
library(Matrix)
library(mvtnorm)
library(mixtools)
library(dplyr)
library(stats)
## Sourcing file
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/plot_helper.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/rem_core.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/initial_cond.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/simulator.R')
## Set hyperparam
cluster = 4
lam = 1.5
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
knitr::opts_chunk$set(echo = TRUE)
## Library needed
library(ggpubr)
library(MASS)
library(stats)
library(Matrix)
library(mvtnorm)
library(mixtools)
library(dplyr)
library(stats)
## Sourcing file
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/plot_helper.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/rem_core.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/initial_cond.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/simulator.R')
## Set hyperparam
cluster = 4
lam = 1.5
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
knitr::opts_chunk$set(echo = TRUE)
## Library needed
library(ggpubr)
library(MASS)
library(stats)
library(Matrix)
library(mvtnorm)
library(mixtools)
library(dplyr)
library(stats)
## Sourcing file
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/plot_helper.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/rem_core.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/initial_cond.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/simulator.R')
## Set hyperparam
cluster = 4
lam = 1.5
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
knitr::opts_chunk$set(echo = TRUE)
## Library needed
library(ggpubr)
library(MASS)
library(stats)
library(Matrix)
library(mvtnorm)
library(mixtools)
library(dplyr)
library(stats)
## Sourcing file
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/plot_helper.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/rem_core.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/initial_cond.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/simulator.R')
## Set hyperparam
cluster = 4
lam = 1.5
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
## Set hyperparam
cluster = 4
lam = 2
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
knitr::opts_chunk$set(echo = TRUE)
## Library needed
library(ggpubr)
library(MASS)
library(stats)
library(Matrix)
library(mvtnorm)
library(mixtools)
library(dplyr)
library(stats)
## Sourcing file
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/plot_helper.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/rem_core.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/initial_cond.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/simulator.R')
## Set hyperparam
cluster = 4
lam = 1.5
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
knitr::opts_chunk$set(echo = TRUE)
## Library needed
library(ggpubr)
library(MASS)
library(stats)
library(Matrix)
library(mvtnorm)
library(mixtools)
library(dplyr)
library(stats)
## Sourcing file
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/plot_helper.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/rem_core.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/initial_cond.R')
source('C:/Users/njzmh/OneDrive/Desktop/REM_official/simulator.R')
## Set hyperparam
cluster = 4
lam = 1.5
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
## Set hyperparam
cluster = 4
lam = 2
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
## Set hyperparam
cluster = 4
lam = 2.5
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
## Set hyperparam
cluster = 4
lam = 2.2
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.15,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
## Set hyperparam
cluster = 4
lam = 2.2
## Data Simulation: (For simulation purpose, the dimension is set as 2)
# Data is simulated by multivariate normal plus a set of uniform
sim_info <- simMultGauss_unif(n = 100,
d = 2,
cluster = cluster,
out_perc = 0.10,
out_mag = 2)
ggplot() + geom_point(aes(x = sim_info$simdata[,1], y = sim_info$simdata[,2]))
## Classifications from Hierarchical Agglomeration
init_cond <- initial_hier(sim_info$simdata, cluster = cluster)
## MCLUST
result_mclust = Mclust(sim_info[["simdata"]], verbose=F, G=cluster, modelNames = "VVV",
initialization = list(hcPairs = hc(sim_info[["simdata"]])),
control = emControl(tol=c(1.e-5, 1.e-6), itmax=10))
## Standard EM
result_std <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = 1, sigma_str = 'unstr', inits = init_cond)
## Robust EM
result_robust <- EM_robust(sampleMat =  sim_info$simdata, c = cluster, d=2, lambda = lam, sigma_str = 'unstr', inits = init_cond)
p1 <- plot_mc(result_mclust)
p2 <- plot_rem(result_std, sim_info$simdata)
p3 <- plot_rem(result_robust, sim_info$simdata)
ggarrange(p1,p2, p3,
labels = c('mclust' ,'standard', 'robust'),
ncol = 3, nrow = 1)
